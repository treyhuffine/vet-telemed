// Query TypeMap
import '@sanity/client';

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Tag = {
  _id: string;
  _type: 'tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  categories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'category';
  }>;
  tags?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
  editorialClassification?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'editorialClassification';
  };
  publishedAt?: string;
  seoMeta?: SeoMeta;
  previewDescription?: string;
  readingTime?: number;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h2' | 'h3' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
};

export type SeoMeta = {
  _type: 'seoMeta';
  metaTitle?: string;
  metaDescription?: string;
  shareTitle?: string;
  shareDescription?: string;
  shareImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type EditorialClassification = {
  _id: string;
  _type: 'editorialClassification';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: 'HIGH' | 'GENERAL';
  slug?: Slug;
  description?: string;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h2' | 'h3' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Tag
  | Post
  | SeoMeta
  | EditorialClassification
  | Author
  | Category
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | MediaTag
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/services/server/sanity/groq/getAllPosts.ts
// Variable: GetAllPostsQuery
// Query: *[_type == "post"] | order(coalesce(publishedAt, _createdAt) desc) {  _id,  title,  slug,  publishedAt,  _createdAt,  _updatedAt,  "author": author->{    _id,    name,    slug,    "image": image{      "url": asset->url,      alt    },    bio  },  mainImage,  categories[]->{    _id,    title,    slug,    description  },  tags[]->{    _id,    title,    slug,    description  },  editorialClassification->{    _id,    title,    slug,    description  },  "seoMeta": seoMeta{    metaTitle,    metaDescription,    shareTitle,    shareDescription,    "shareImage": shareImage{      "url": asset->url    }  },  previewDescription,  readingTime}
export type GetAllPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  _createdAt: string;
  _updatedAt: string;
  author: {
    _id: string;
    name: string | null;
    slug: Slug | null;
    image: {
      url: string | null;
      alt: string | null;
    } | null;
    bio: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal';
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
  } | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
  tags: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
  editorialClassification: {
    _id: string;
    title: 'GENERAL' | 'HIGH' | null;
    slug: Slug | null;
    description: string | null;
  } | null;
  seoMeta: {
    metaTitle: string | null;
    metaDescription: string | null;
    shareTitle: string | null;
    shareDescription: string | null;
    shareImage: {
      url: string | null;
    } | null;
  } | null;
  previewDescription: string | null;
  readingTime: number | null;
}>;

// Source: ./src/services/server/sanity/groq/getPostBySlug.ts
// Variable: GetPostBySlugQuery
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  title,  slug,  publishedAt,  _createdAt,  _updatedAt,  readingTime,  "author": author->{    _id,    name,    slug,    "image": image{      "url": asset->url,      alt    },    bio  },  mainImage,  categories[]->{    _id,    title,    slug,    description  },  tags[]->{    _id,    title,    slug,    description  },  editorialClassification->{    _id,    title,    slug,    description  },  "seoMeta": seoMeta{    metaTitle,    metaDescription,    shareTitle,    shareDescription,    "shareImage": shareImage{      "url": asset->url    }  },  previewDescription,  body}
export type GetPostBySlugQueryResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  _createdAt: string;
  _updatedAt: string;
  readingTime: number | null;
  author: {
    _id: string;
    name: string | null;
    slug: Slug | null;
    image: {
      url: string | null;
      alt: string | null;
    } | null;
    bio: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal';
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
  } | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
  tags: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
  editorialClassification: {
    _id: string;
    title: 'GENERAL' | 'HIGH' | null;
    slug: Slug | null;
    description: string | null;
  } | null;
  seoMeta: {
    metaTitle: string | null;
    metaDescription: string | null;
    shareTitle: string | null;
    shareDescription: string | null;
    shareImage: {
      url: string | null;
    } | null;
  } | null;
  previewDescription: string | null;
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h2' | 'h3' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  > | null;
} | null;

// Source: ./src/services/server/sanity/groq/getPostSlugs.ts
// Variable: GetPostSlugsQuery
// Query: *[  _type == "post"   && defined(slug.current)]{  slug}
export type GetPostSlugsQueryResult = Array<{
  slug: Slug | null;
}>;

declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "post"] | order(coalesce(publishedAt, _createdAt) desc) {\n  _id,\n  title,\n  slug,\n  publishedAt,\n  _createdAt,\n  _updatedAt,\n  "author": author->{\n    _id,\n    name,\n    slug,\n    "image": image{\n      "url": asset->url,\n      alt\n    },\n    bio\n  },\n  mainImage,\n  categories[]->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  tags[]->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  editorialClassification->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  "seoMeta": seoMeta{\n    metaTitle,\n    metaDescription,\n    shareTitle,\n    shareDescription,\n    "shareImage": shareImage{\n      "url": asset->url\n    }\n  },\n  previewDescription,\n  readingTime\n}': GetAllPostsQueryResult;
    '*[_type == "post" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  publishedAt,\n  _createdAt,\n  _updatedAt,\n  readingTime,\n  "author": author->{\n    _id,\n    name,\n    slug,\n    "image": image{\n      "url": asset->url,\n      alt\n    },\n    bio\n  },\n  mainImage,\n  categories[]->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  tags[]->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  editorialClassification->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  "seoMeta": seoMeta{\n    metaTitle,\n    metaDescription,\n    shareTitle,\n    shareDescription,\n    "shareImage": shareImage{\n      "url": asset->url\n    }\n  },\n  previewDescription,\n  body\n}': GetPostBySlugQueryResult;
    '*[\n  _type == "post" \n  && defined(slug.current)\n]{\n  slug\n}': GetPostSlugsQueryResult;
  }
}
