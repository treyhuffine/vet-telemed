/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  fragment chatThread on ChatThreads {\n    id\n    title\n    messages(orderBy: { createdAt: ASC }) {\n      id\n      user {\n        id\n        name\n      }\n      content\n      role\n      files {\n        id\n        filePath\n        fileName\n        mimeType\n      }\n    }\n    breadEntry {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      expertGuidance\n      expertGuidanceConfidence\n      id\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      recipeId\n      recipe {\n        id\n        name\n        url\n        ingredients\n        instructions\n        remarks\n        notes(\n          orderBy: { createdAt: DESC }\n          where: { archivedAt: { _isNull: true }, deletedAt: { _isNull: true } }\n        ) {\n          id\n          content\n          createdAt\n        }\n      }\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n": types.ChatThreadFragmentDoc,
    "\n  mutation insertRecipe(\n    $ingredients: String = \"\"\n    $instructions: String = \"\"\n    $name: String = \"\"\n    $remarks: String = \"\"\n    $url: String = \"\"\n    $userId: uuid!\n    $flour: String = \"\"\n    $water: String = \"\"\n    $salt: String = \"\"\n  ) {\n    insertRecipesOne(\n      object: {\n        ingredients: $ingredients\n        instructions: $instructions\n        name: $name\n        remarks: $remarks\n        url: $url\n        userId: $userId\n        flour: $flour\n        water: $water\n        salt: $salt\n      }\n    ) {\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      url\n      flour\n      water\n      salt\n    }\n  }\n": types.InsertRecipeDocument,
    "\n  mutation insertRecipeNote($content: String!, $recipeId: uuid!, $userId: uuid!) {\n    insertRecipeNotesOne(object: { content: $content, recipeId: $recipeId, userId: $userId }) {\n      id\n      createdAt\n      content\n    }\n  }\n": types.InsertRecipeNoteDocument,
    "\n  mutation setBreadEntryRecipe($id: uuid!, $recipeId: uuid!) {\n    updateBreadEntriesByPk(pkColumns: { id: $id }, _set: { recipeId: $recipeId }) {\n      id\n      userId\n      recipeId\n      recipe {\n        ingredients\n        id\n        createdAt\n        name\n        instructions\n        url\n        remarks\n      }\n    }\n    updateRecipesByPk(pkColumns: { id: $recipeId }, _set: { lastUsedAt: \"now()\" }) {\n      id\n      lastUsedAt\n    }\n  }\n": types.SetBreadEntryRecipeDocument,
    "\n  mutation setUserFullName($id: uuid!, $name: String = \"\") {\n    updateUsersByPk(pkColumns: { id: $id }, _set: { name: $name }) {\n      id\n      name\n    }\n  }\n": types.SetUserFullNameDocument,
    "\n  mutation updateBreadEntryNotes($id: uuid = \"\", $notes: String = \"\") {\n    updateBreadEntriesByPk(pkColumns: { id: $id }, _set: { notes: $notes }) {\n      id\n      notes\n    }\n  }\n": types.UpdateBreadEntryNotesDocument,
    "\n  mutation updateRecipe(\n    $id: uuid!\n    $ingredients: String\n    $instructions: String\n    $name: String\n    $remarks: String\n    $url: String\n    $flour: String\n    $water: String\n    $salt: String\n  ) {\n    updateRecipesByPk(\n      pkColumns: { id: $id }\n      _set: {\n        ingredients: $ingredients\n        instructions: $instructions\n        name: $name\n        remarks: $remarks\n        url: $url\n        flour: $flour\n        water: $water\n        salt: $salt\n      }\n    ) {\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      updatedAt\n      url\n      userId\n      createdAt\n      deletedAt\n      archivedAt\n      flour\n      water\n      salt\n    }\n  }\n": types.UpdateRecipeDocument,
    "\n  query getBreadEntryById($id: uuid!) {\n    breadEntriesByPk(id: $id) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      recipeId\n      recipe {\n        id\n        name\n        url\n        ingredients\n        instructions\n        remarks\n        notes(\n          orderBy: { createdAt: DESC }\n          where: { archivedAt: { _isNull: true }, deletedAt: { _isNull: true } }\n        ) {\n          id\n          content\n          createdAt\n        }\n      }\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n": types.GetBreadEntryByIdDocument,
    "\n  query getChatThreadById($id: uuid!) {\n    chatThreadsByPk(id: $id) {\n      ...chatThread\n    }\n  }\n": types.GetChatThreadByIdDocument,
    "\n  query getChatThreadsForUser($userId: uuid!) {\n    chatThreads(where: { userId: { _eq: $userId } }, orderBy: { updatedAt: DESC }) {\n      id\n      title\n    }\n  }\n": types.GetChatThreadsForUserDocument,
    "\n  query getRecipeBreadEntries($recipeId: uuid!) {\n    breadEntries(\n      orderBy: { createdAt: DESC }\n      where: {\n        recipeId: { _eq: $recipeId }\n        archivedAt: { _isNull: true }\n        deletedAt: { _isNull: true }\n      }\n    ) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n": types.GetRecipeBreadEntriesDocument,
    "\n  query getRecipeById($id: uuid!) {\n    recipesByPk(id: $id) {\n      archivedAt\n      createdAt\n      deletedAt\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      updatedAt\n      url\n      flour\n      water\n      salt\n    }\n  }\n": types.GetRecipeByIdDocument,
    "\n  query getRecipeNotes($recipeId: uuid!) {\n    recipeNotes(\n      orderBy: { createdAt: DESC }\n      where: {\n        recipeId: { _eq: $recipeId }\n        deletedAt: { _isNull: true }\n        archivedAt: { _isNull: true }\n      }\n    ) {\n      id\n      createdAt\n      content\n    }\n  }\n": types.GetRecipeNotesDocument,
    "\n  query getUserBreadEntries($userId: uuid!) {\n    breadEntries(orderBy: { createdAt: DESC }, where: { userId: { _eq: $userId } }) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      recipe {\n        id\n        name\n        url\n      }\n      hasValidImage\n      validImageConfidence\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n": types.GetUserBreadEntriesDocument,
    "\n  query getUserRecipes($userId: uuid!) {\n    recipes(orderBy: { lastUsedAt: DESC }, where: { userId: { _eq: $userId } }) {\n      id\n      name\n      remarks\n      url\n      flour\n      water\n      salt\n      lastUsedAt\n    }\n  }\n": types.GetUserRecipesDocument,
    "\n  query getViewerById($id: uuid!) {\n    usersByPk(id: $id) {\n      id\n      name\n      email\n    }\n  }\n": types.GetViewerByIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment chatThread on ChatThreads {\n    id\n    title\n    messages(orderBy: { createdAt: ASC }) {\n      id\n      user {\n        id\n        name\n      }\n      content\n      role\n      files {\n        id\n        filePath\n        fileName\n        mimeType\n      }\n    }\n    breadEntry {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      expertGuidance\n      expertGuidanceConfidence\n      id\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      recipeId\n      recipe {\n        id\n        name\n        url\n        ingredients\n        instructions\n        remarks\n        notes(\n          orderBy: { createdAt: DESC }\n          where: { archivedAt: { _isNull: true }, deletedAt: { _isNull: true } }\n        ) {\n          id\n          content\n          createdAt\n        }\n      }\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment chatThread on ChatThreads {\n    id\n    title\n    messages(orderBy: { createdAt: ASC }) {\n      id\n      user {\n        id\n        name\n      }\n      content\n      role\n      files {\n        id\n        filePath\n        fileName\n        mimeType\n      }\n    }\n    breadEntry {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      expertGuidance\n      expertGuidanceConfidence\n      id\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      recipeId\n      recipe {\n        id\n        name\n        url\n        ingredients\n        instructions\n        remarks\n        notes(\n          orderBy: { createdAt: DESC }\n          where: { archivedAt: { _isNull: true }, deletedAt: { _isNull: true } }\n        ) {\n          id\n          content\n          createdAt\n        }\n      }\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation insertRecipe(\n    $ingredients: String = \"\"\n    $instructions: String = \"\"\n    $name: String = \"\"\n    $remarks: String = \"\"\n    $url: String = \"\"\n    $userId: uuid!\n    $flour: String = \"\"\n    $water: String = \"\"\n    $salt: String = \"\"\n  ) {\n    insertRecipesOne(\n      object: {\n        ingredients: $ingredients\n        instructions: $instructions\n        name: $name\n        remarks: $remarks\n        url: $url\n        userId: $userId\n        flour: $flour\n        water: $water\n        salt: $salt\n      }\n    ) {\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      url\n      flour\n      water\n      salt\n    }\n  }\n"): (typeof documents)["\n  mutation insertRecipe(\n    $ingredients: String = \"\"\n    $instructions: String = \"\"\n    $name: String = \"\"\n    $remarks: String = \"\"\n    $url: String = \"\"\n    $userId: uuid!\n    $flour: String = \"\"\n    $water: String = \"\"\n    $salt: String = \"\"\n  ) {\n    insertRecipesOne(\n      object: {\n        ingredients: $ingredients\n        instructions: $instructions\n        name: $name\n        remarks: $remarks\n        url: $url\n        userId: $userId\n        flour: $flour\n        water: $water\n        salt: $salt\n      }\n    ) {\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      url\n      flour\n      water\n      salt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation insertRecipeNote($content: String!, $recipeId: uuid!, $userId: uuid!) {\n    insertRecipeNotesOne(object: { content: $content, recipeId: $recipeId, userId: $userId }) {\n      id\n      createdAt\n      content\n    }\n  }\n"): (typeof documents)["\n  mutation insertRecipeNote($content: String!, $recipeId: uuid!, $userId: uuid!) {\n    insertRecipeNotesOne(object: { content: $content, recipeId: $recipeId, userId: $userId }) {\n      id\n      createdAt\n      content\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation setBreadEntryRecipe($id: uuid!, $recipeId: uuid!) {\n    updateBreadEntriesByPk(pkColumns: { id: $id }, _set: { recipeId: $recipeId }) {\n      id\n      userId\n      recipeId\n      recipe {\n        ingredients\n        id\n        createdAt\n        name\n        instructions\n        url\n        remarks\n      }\n    }\n    updateRecipesByPk(pkColumns: { id: $recipeId }, _set: { lastUsedAt: \"now()\" }) {\n      id\n      lastUsedAt\n    }\n  }\n"): (typeof documents)["\n  mutation setBreadEntryRecipe($id: uuid!, $recipeId: uuid!) {\n    updateBreadEntriesByPk(pkColumns: { id: $id }, _set: { recipeId: $recipeId }) {\n      id\n      userId\n      recipeId\n      recipe {\n        ingredients\n        id\n        createdAt\n        name\n        instructions\n        url\n        remarks\n      }\n    }\n    updateRecipesByPk(pkColumns: { id: $recipeId }, _set: { lastUsedAt: \"now()\" }) {\n      id\n      lastUsedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation setUserFullName($id: uuid!, $name: String = \"\") {\n    updateUsersByPk(pkColumns: { id: $id }, _set: { name: $name }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation setUserFullName($id: uuid!, $name: String = \"\") {\n    updateUsersByPk(pkColumns: { id: $id }, _set: { name: $name }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateBreadEntryNotes($id: uuid = \"\", $notes: String = \"\") {\n    updateBreadEntriesByPk(pkColumns: { id: $id }, _set: { notes: $notes }) {\n      id\n      notes\n    }\n  }\n"): (typeof documents)["\n  mutation updateBreadEntryNotes($id: uuid = \"\", $notes: String = \"\") {\n    updateBreadEntriesByPk(pkColumns: { id: $id }, _set: { notes: $notes }) {\n      id\n      notes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateRecipe(\n    $id: uuid!\n    $ingredients: String\n    $instructions: String\n    $name: String\n    $remarks: String\n    $url: String\n    $flour: String\n    $water: String\n    $salt: String\n  ) {\n    updateRecipesByPk(\n      pkColumns: { id: $id }\n      _set: {\n        ingredients: $ingredients\n        instructions: $instructions\n        name: $name\n        remarks: $remarks\n        url: $url\n        flour: $flour\n        water: $water\n        salt: $salt\n      }\n    ) {\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      updatedAt\n      url\n      userId\n      createdAt\n      deletedAt\n      archivedAt\n      flour\n      water\n      salt\n    }\n  }\n"): (typeof documents)["\n  mutation updateRecipe(\n    $id: uuid!\n    $ingredients: String\n    $instructions: String\n    $name: String\n    $remarks: String\n    $url: String\n    $flour: String\n    $water: String\n    $salt: String\n  ) {\n    updateRecipesByPk(\n      pkColumns: { id: $id }\n      _set: {\n        ingredients: $ingredients\n        instructions: $instructions\n        name: $name\n        remarks: $remarks\n        url: $url\n        flour: $flour\n        water: $water\n        salt: $salt\n      }\n    ) {\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      updatedAt\n      url\n      userId\n      createdAt\n      deletedAt\n      archivedAt\n      flour\n      water\n      salt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getBreadEntryById($id: uuid!) {\n    breadEntriesByPk(id: $id) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      recipeId\n      recipe {\n        id\n        name\n        url\n        ingredients\n        instructions\n        remarks\n        notes(\n          orderBy: { createdAt: DESC }\n          where: { archivedAt: { _isNull: true }, deletedAt: { _isNull: true } }\n        ) {\n          id\n          content\n          createdAt\n        }\n      }\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBreadEntryById($id: uuid!) {\n    breadEntriesByPk(id: $id) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      recipeId\n      recipe {\n        id\n        name\n        url\n        ingredients\n        instructions\n        remarks\n        notes(\n          orderBy: { createdAt: DESC }\n          where: { archivedAt: { _isNull: true }, deletedAt: { _isNull: true } }\n        ) {\n          id\n          content\n          createdAt\n        }\n      }\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getChatThreadById($id: uuid!) {\n    chatThreadsByPk(id: $id) {\n      ...chatThread\n    }\n  }\n"): (typeof documents)["\n  query getChatThreadById($id: uuid!) {\n    chatThreadsByPk(id: $id) {\n      ...chatThread\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getChatThreadsForUser($userId: uuid!) {\n    chatThreads(where: { userId: { _eq: $userId } }, orderBy: { updatedAt: DESC }) {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  query getChatThreadsForUser($userId: uuid!) {\n    chatThreads(where: { userId: { _eq: $userId } }, orderBy: { updatedAt: DESC }) {\n      id\n      title\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getRecipeBreadEntries($recipeId: uuid!) {\n    breadEntries(\n      orderBy: { createdAt: DESC }\n      where: {\n        recipeId: { _eq: $recipeId }\n        archivedAt: { _isNull: true }\n        deletedAt: { _isNull: true }\n      }\n    ) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRecipeBreadEntries($recipeId: uuid!) {\n    breadEntries(\n      orderBy: { createdAt: DESC }\n      where: {\n        recipeId: { _eq: $recipeId }\n        archivedAt: { _isNull: true }\n        deletedAt: { _isNull: true }\n      }\n    ) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      hasValidImage\n      validImageConfidence\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getRecipeById($id: uuid!) {\n    recipesByPk(id: $id) {\n      archivedAt\n      createdAt\n      deletedAt\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      updatedAt\n      url\n      flour\n      water\n      salt\n    }\n  }\n"): (typeof documents)["\n  query getRecipeById($id: uuid!) {\n    recipesByPk(id: $id) {\n      archivedAt\n      createdAt\n      deletedAt\n      id\n      ingredients\n      instructions\n      lastUsedAt\n      name\n      remarks\n      updatedAt\n      url\n      flour\n      water\n      salt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getRecipeNotes($recipeId: uuid!) {\n    recipeNotes(\n      orderBy: { createdAt: DESC }\n      where: {\n        recipeId: { _eq: $recipeId }\n        deletedAt: { _isNull: true }\n        archivedAt: { _isNull: true }\n      }\n    ) {\n      id\n      createdAt\n      content\n    }\n  }\n"): (typeof documents)["\n  query getRecipeNotes($recipeId: uuid!) {\n    recipeNotes(\n      orderBy: { createdAt: DESC }\n      where: {\n        recipeId: { _eq: $recipeId }\n        deletedAt: { _isNull: true }\n        archivedAt: { _isNull: true }\n      }\n    ) {\n      id\n      createdAt\n      content\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserBreadEntries($userId: uuid!) {\n    breadEntries(orderBy: { createdAt: DESC }, where: { userId: { _eq: $userId } }) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      recipe {\n        id\n        name\n        url\n      }\n      hasValidImage\n      validImageConfidence\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUserBreadEntries($userId: uuid!) {\n    breadEntries(orderBy: { createdAt: DESC }, where: { userId: { _eq: $userId } }) {\n      archivedAt\n      cons\n      consConfidence\n      createdAt\n      analysis\n      # crumbStructure\n      # crumbStructureDescription\n      # crumbStructureConfidence\n      # crustCrumbConfidence\n      # crustCrumbDescription\n      expertGuidance\n      expertGuidanceConfidence\n      # hasLargeHolesNearTop\n      # hasSeparation\n      # holeDistributionConfidence\n      # holeDistributionDescription\n      id\n      # isGummyOrDense\n      # isHoleDistributionEven\n      # isLightAndAiry\n      # isWellBonded\n      notes\n      overallConfidence\n      overallScore\n      pros\n      prosConfidence\n      # textureConfidence\n      # textureDescription\n      updatedAt\n      summary\n      trendAnalysis\n      recipe {\n        id\n        name\n        url\n      }\n      hasValidImage\n      validImageConfidence\n      images(orderBy: { createdAt: DESC }) {\n        id\n        imagePath\n        imageName\n        originalImageName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserRecipes($userId: uuid!) {\n    recipes(orderBy: { lastUsedAt: DESC }, where: { userId: { _eq: $userId } }) {\n      id\n      name\n      remarks\n      url\n      flour\n      water\n      salt\n      lastUsedAt\n    }\n  }\n"): (typeof documents)["\n  query getUserRecipes($userId: uuid!) {\n    recipes(orderBy: { lastUsedAt: DESC }, where: { userId: { _eq: $userId } }) {\n      id\n      name\n      remarks\n      url\n      flour\n      water\n      salt\n      lastUsedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getViewerById($id: uuid!) {\n    usersByPk(id: $id) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query getViewerById($id: uuid!) {\n    usersByPk(id: $id) {\n      id\n      name\n      email\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;